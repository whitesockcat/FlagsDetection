"""
inference on a image testset and generate CSV file.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from collections import defaultdict
import argparse
import cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)
import glob
import logging
import os
import pandas as pd 
import sys
import time
import numpy as np
from caffe2.python import workspace
import pycocotools.mask as mask_util
from detectron.core.config import assert_and_infer_cfg
from detectron.core.config import cfg
from detectron.core.config import merge_cfg_from_file
from detectron.utils.io import cache_url
from detectron.utils.logging import setup_logging
from detectron.utils.timer import Timer
import detectron.core.test_engine as infer_engine
import detectron.datasets.dummy_datasets as dummy_datasets
import detectron.utils.c2 as c2_utils
c2_utils.import_detectron_ops()

print ('start line:', int(sys.argv[1]) )
print ('csv filename', sys.argv[2])

width  = 3384
height = 2710
height_start = int(sys.argv[1])
WIDTH_O  = 3384
HEIGHT_O = 736
THRESHOLD= 0.25
OFFSET = height_start*width
# OpenCL may be enabled by default in OpenCV3; disable it because it's not
# thread safe and causes unwanted GPU memory allocations.
cv2.ocl.setUseOpenCL(False)

def convert_from_cls_format(cls_boxes, cls_segms, cls_keyps):
    """Convert from the class boxes/segms/keyps format generated by the testing
    code.
    原来cls_boxes包含num_classes个列表，每个列表里又包含n个框；
    转换后每个boxes都代表一个框，对应的classes表示类别
    """
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None
    if cls_segms is not None:
        segms = [s for slist in cls_segms for s in slist]
    else:
        segms = None
    if cls_keyps is not None:
        keyps = [k for klist in cls_keyps for k in klist]
    else:
        keyps = None
    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, segms, keyps, classes
    

PROJECT_DIR     = '/userhome/apollo/'
OUTPUT          = PROJECT_DIR + sys.argv[4] + '/'
df              = pd.read_csv(PROJECT_DIR + 'submit_sample.csv')
OUTPUT_CSV_DIR  = OUTPUT + sys.argv[2] #result_0607_3384_3.csv'
MODEL           = OUTPUT + 'train/coco_2014_train/generalized_rcnn/' + sys.argv[3]#7.pkl'

#filenames = df['ImageId']

filenames = []
# for root, dirs, files in sorted(os.walk(PROJECT_DIR + 'test/')):
#     for f in files:
#         filenames.append(f)

for i in range(len(df)):
    name = df.iat[i, 0]
    if name not in filenames:
        filenames.append(name)
        
assert len(filenames) == 1917
# print(f)
filenames2    = []  
labels        = []  
pix_cnt       = [] 
conf          = [] 
encode_pixel  = []

def main():
    logger = logging.getLogger(__name__)
    merge_cfg_from_file(PROJECT_DIR + 'configs/apollo/mask_rcnn_X-101-64x4d-FPN_1x.yaml')
    cfg.NUM_GPUS = 1
    assert_and_infer_cfg(cache_urls=False)
    model = infer_engine.initialize_model_from_cfg(MODEL)
    dummy_coco_dataset = dummy_datasets.get_coco_dataset()
    frame_cnt = 0

    for filename in filenames:
        # image_path = root + filename #PROJECT_DIR + 'detectron/datasets/data/apollo/test/'+ filename + '.jpg'
        image_path = PROJECT_DIR + 'test/' + filename + '.jpg'
        frame_cnt = frame_cnt + 1
        im  = cv2.imread(image_path)
        im2 = im[height_start:height_start+HEIGHT_O,:]
        print(image_path, frame_cnt, (np.array(im)).shape, (np.array(im2)).shape)
        timers = defaultdict(Timer)
        t = time.time()
        with c2_utils.NamedCudaScope(0):
            cls_boxes, cls_segms, cls_keyps = infer_engine.im_detect_all(model, im2, None, timers=timers)
            
        keypoints=None
        if isinstance(cls_boxes, list):
            cls_boxes, cls_segms, keypoints, classes = convert_from_cls_format(cls_boxes, cls_segms, keypoints)
        if cls_segms is not None and len(cls_segms) > 0:
                masks = mask_util.decode(cls_segms)        
       
        segms = cls_segms        
        boxes = cls_boxes
        #print(boxes)
        if boxes is not None:
            areas = (boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1])
            sorted_inds = np.argsort(-areas)
            flag = False        
            for i in sorted_inds:
                bbox  = boxes[i, :4]
                score = boxes[i, -1]
                label = classes[i]
                if score < THRESHOLD:
                    continue     
                    
                # show mask
                if segms is not None and len(segms) > i:
                    #print(bbox, score, classes[i])  
                    e = masks[:, :, i]
		        #print(e.shape)
                if (label==1):   #pedestrain
                    label=36 
                elif (label==2): #bicycle
                    label=35 
                elif (label==3): #car
                    label=33 
                elif (label==4): #motor cycle
                    label=34
                elif (label==5): #bus
                    label=39 
                elif (label==6): #truck
                    label=38
                elif (label==7): #tricycle
                    label=40
                elif (label==8):
	                label=37
                else :
                    label=255
                  
                if ( (label<41) and (label>32) and (label != 37)):
                    inds = e.flatten()
                    #height_start*width
                    #first and last must be zero
                    inds[0]=0
                    inds[-1]=0
                    runs = np.where(inds[1:] != inds[:-1])[0] + 1
                    #print(runs, runs+OFFSET)
                    runs[1::2] = runs[1::2] - runs[:-1:2]
                    rle = ' '.join([str(r) for r in runs])
                    rle.replace("  ", " ")
                    output = []
                    i=0                    
                    #print(type(rle))
                    rle = rle.decode("utf-8").split()
                    #print(len(rle))
                    for kk in range(0, len(rle)):
                        #print('&& ', kk)
                        #print (rle[kk])
                        if (kk%2==0):
                            output.append(str(int(rle[kk])+OFFSET))
                            output.append(' ')
                        else:
                            output.append(str(rle[kk]))  
                            output.append('|')
			            #print(output)
                    output =  ''.join(output)
                    filenames2.append(filename)    
                    labels.append(label)
                    pix_cnt.append(np.sum(inds))
                    conf.append(score)
                    encode_pixel.append(output)
                    flag = True
            if not flag:
                filenames2.append(filename)    
                labels.append(int(33))
                pix_cnt.append(int(100))
                conf.append(int(1))
                encode_pixel.append('1 100|')
        #if (frame_cnt>3):
        #    break
        else:
            filenames2.append(filename)    
            labels.append(int(33))
            pix_cnt.append(int(100))
            conf.append(int(1))
            encode_pixel.append('1 100|')

        logger.info('Inference time: {:.3f}s'.format(time.time() - t))

    df1  = pd.DataFrame({ 'ImageId' : filenames2 ,  'LabelId' : labels,  'PixelCount' : pix_cnt, 'Confidence':conf, 'EncodedPixels': encode_pixel}) 
    df1.to_csv(OUTPUT_CSV_DIR, index=False, columns=['ImageId', 'LabelId', 'PixelCount', 'Confidence', 'EncodedPixels']) # add date      

if __name__ == '__main__':
    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])
    setup_logging(__name__)
    main()
